--- a/bfd/libcoff-in.h
+++ b/bfd/libcoff-in.h
@@ -147,7 +147,6 @@
   int dll;
   int has_reloc_section;
   int dont_strip_reloc;
-  char dos_message[64];
   /* The timestamp to insert into the output file.
      If the timestamp is -1 then the current time is used.  */
   int timestamp;
--- a/bfd/libcoff.h
+++ b/bfd/libcoff.h
@@ -151,7 +151,6 @@
   int dll;
   int has_reloc_section;
   int dont_strip_reloc;
-  char dos_message[64];
   /* The timestamp to insert into the output file.
      If the timestamp is -1 then the current time is used.  */
   int timestamp;
--- a/bfd/peXXigen.c
+++ b/bfd/peXXigen.c
@@ -802,18 +802,18 @@
     filehdr_in->f_flags |= F_DLL;
 
   filehdr_in->pe.e_magic    = IMAGE_DOS_SIGNATURE;
-  filehdr_in->pe.e_cblp     = 0x90;
-  filehdr_in->pe.e_cp       = 0x3;
+  filehdr_in->pe.e_cblp     = 0x0;
+  filehdr_in->pe.e_cp       = 0x0;
   filehdr_in->pe.e_crlc     = 0x0;
-  filehdr_in->pe.e_cparhdr  = 0x4;
+  filehdr_in->pe.e_cparhdr  = 0x0;
   filehdr_in->pe.e_minalloc = 0x0;
-  filehdr_in->pe.e_maxalloc = 0xffff;
+  filehdr_in->pe.e_maxalloc = 0x0;
   filehdr_in->pe.e_ss       = 0x0;
-  filehdr_in->pe.e_sp       = 0xb8;
+  filehdr_in->pe.e_sp       = 0x0;
   filehdr_in->pe.e_csum     = 0x0;
   filehdr_in->pe.e_ip       = 0x0;
   filehdr_in->pe.e_cs       = 0x0;
-  filehdr_in->pe.e_lfarlc   = 0x40;
+  filehdr_in->pe.e_lfarlc   = 0x0;
   filehdr_in->pe.e_ovno     = 0x0;
 
   for (idx = 0; idx < 4; idx++)
@@ -825,12 +825,7 @@
   for (idx = 0; idx < 10; idx++)
     filehdr_in->pe.e_res2[idx] = 0x0;
 
-  filehdr_in->pe.e_lfanew = 0x80;
-
-  /* This next collection of data are mostly just characters.  It
-     appears to be constant within the headers put on NT exes.  */
-  memcpy (filehdr_in->pe.dos_message, pe_data (abfd)->dos_message,
-	  sizeof (filehdr_in->pe.dos_message));
+  filehdr_in->pe.e_lfanew = 0x40;
 
   filehdr_in->pe.nt_signature = IMAGE_NT_SIGNATURE;
 
@@ -882,9 +877,6 @@
 
   H_PUT_32 (abfd, filehdr_in->pe.e_lfanew, filehdr_out->e_lfanew);
 
-  memcpy (filehdr_out->dos_message, filehdr_in->pe.dos_message,
-	  sizeof (filehdr_out->dos_message));
-
   /* Also put in the NT signature.  */
   H_PUT_32 (abfd, filehdr_in->pe.nt_signature, filehdr_out->nt_signature);
 
@@ -3016,8 +3008,6 @@
       && ! (pe_data (ibfd)->real_flags & IMAGE_FILE_RELOCS_STRIPPED))
     pe_data (obfd)->dont_strip_reloc = 1;
 
-  memcpy (ope->dos_message, ipe->dos_message, sizeof (ope->dos_message));
-
   /* The file offsets contained in the debug directory need rewriting.  */
   size = ope->pe_opthdr.DataDirectory[PE_DEBUG_DATA].Size;
   if (size != 0)
--- a/bfd/peicode.h
+++ b/bfd/peicode.h
@@ -259,17 +259,6 @@
 static bool
 pe_mkobject (bfd *abfd)
 {
-  /* Some x86 code followed by an ascii string.  */
-  static const char default_dos_message[64] = {
-    0x0e, 0x1f, 0xba, 0x0e, 0x00, 0xb4, 0x09, 0xcd,
-    0x21, 0xb8, 0x01, 0x4c, 0xcd, 0x21, 0x54, 0x68,
-    0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72,
-    0x61, 0x6d, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f,
-    0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6e,
-    0x20, 0x69, 0x6e, 0x20, 0x44, 0x4f, 0x53, 0x20,
-    0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x0d, 0x0d, 0x0a,
-    0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
-
   pe_data_type *pe = bfd_zalloc (abfd, sizeof (*pe));
   abfd->tdata.pe_obj_data = pe;
   if (pe == NULL)
@@ -280,8 +269,6 @@
   /* in_reloc_p is architecture dependent.  */
   pe->in_reloc_p = in_reloc_p;
 
-  memcpy (pe->dos_message, default_dos_message, sizeof (pe->dos_message));
-
   bfd_coff_long_section_names (abfd)
     = coff_backend_info (abfd)->_bfd_coff_long_section_names;
 
@@ -338,9 +325,6 @@
     coff_data (abfd) ->flags = 0;
 #endif
 
-  memcpy (pe->dos_message, internal_f->pe.dos_message,
-	  sizeof (pe->dos_message));
-
   return (void *) pe;
 }
 
@@ -1553,9 +1537,6 @@
       return NULL;
     }
 
-  memcpy (internal_f.pe.dos_message, dos_hdr.dos_message,
-	  sizeof (internal_f.pe.dos_message));
-
   /* Read the optional header, which has variable size.  */
   opt_hdr_size = internal_f.f_opthdr;
 
--- a/binutils/od-pe.c
+++ b/binutils/od-pe.c
@@ -336,46 +336,6 @@
   
       ldata = bfd_h_get_32 (abfd, fhdr->e_lfanew);
       printf (_("File address of new exe header:\t%#lx\n"), ldata);
-        
-      /* Display the first string found in the stub.
-	 FIXME: Look for more than one string ?
-	 FIXME: Strictly speaking we may not have read the full stub, since
-	 it can be longer than the dos_message array in the PEI_fileheader
-	 structure.  */
-      const unsigned char * message = (const unsigned char *) fhdr->dos_message;
-      unsigned int len = sizeof (fhdr->dos_message);
-      unsigned int i;
-      unsigned int seen_count = 0;
-      unsigned int string_start = 0;
-  
-      for (i = 0; i < len; i++)
-	{
-	  if (ISPRINT (message[i]))
-	    {
-	      if (string_start == 0)
-		string_start = i;
-	      ++ seen_count;
-	      if (seen_count > 4)
-		break;
-	    }
-	  else
-	    {
-	      seen_count = string_start = 0;
-	    }
-	}
-
-      if (seen_count > 4)
-	{
-	  printf (_("Stub message:\t\t\t"));
-	  while (string_start < len)
-	    {
-	      char c = message[string_start ++];
-	      if (! ISPRINT (c))
-		break;
-	      putchar (c);
-	    }
-	  putchar ('\n');
-	}
 
       ihdr_off = (long) bfd_h_get_32 (abfd, fhdr->e_lfanew);
     }
--- a/include/coff/internal.h
+++ b/include/coff/internal.h
@@ -54,7 +54,6 @@
   unsigned short e_oeminfo;	/* OEM information; e_oemid specific, 0x0 */
   unsigned short e_res2[10];	/* Reserved words, all 0x0 */
   bfd_vma  e_lfanew;		/* File address of new exe header, 0x80 */
-  char dos_message[64];		/* Text which always follows DOS header.  */
   bfd_vma  nt_signature;   	/* required NT signature, 0x4550 */
 };
 
--- a/include/coff/msdos.h
+++ b/include/coff/msdos.h
@@ -48,7 +48,6 @@
   char e_oeminfo[2];		/* OEM information.  */
   char e_res2[10][2];		/* Reserved words, all 0x0.  */
   char e_lfanew[4];		/* File address of new exe header, usually 0x80.  */
-  char dos_message[64];		/* Other stuff, always follow DOS header.  */
 };
 
 /* The actual DOS header only includes up to the e_ovno field.  */
--- a/include/coff/pe.h
+++ b/include/coff/pe.h
@@ -220,7 +220,6 @@
   char e_oeminfo[2];		/* OEM information; e_oemid specific, 0x0.  */
   char e_res2[10][2];		/* Reserved words, all 0x0.  */
   char e_lfanew[4];		/* File address of new exe header, usually 0x80.  */
-  char dos_message[64];		/* Other stuff, always follow DOS header.  */
 
   /* Note: additional bytes may be inserted before the signature.  Use
    the e_lfanew field to find the actual location of the NT signature.  */
@@ -244,7 +243,7 @@
 #undef  FILHDR
 #define FILHDR struct external_PEI_filehdr
 #undef  FILHSZ
-#define FILHSZ 152
+#define FILHSZ 88
 
 #endif /* COFF_IMAGE_WITH_PE */
 
